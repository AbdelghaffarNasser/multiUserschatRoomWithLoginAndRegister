/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package fullparallelprojectchatroom;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

    


public class serverGUI extends javax.swing.JFrame {

    
    static ArrayList c_os;
    static ArrayList<String> users;
    static Socket cs;
    private static ExecutorService pool = Executors.newFixedThreadPool(30);
    
    
    
    public class server_listening implements Runnable
    {
        
        @Override
        public void run()
        {
            c_os=new ArrayList();
            users=new ArrayList();
            
            try
            {
                ServerSocket ss=new ServerSocket(8000);
                while(true)
                {
                    cs=ss.accept();
                    PrintWriter w=new PrintWriter(cs.getOutputStream());
                    c_os.add(w);
                    
                    client_handler clienth = new client_handler(cs,w);
                    pool.execute(clienth);
                    
                    returnedStatus.setText("\nGOT A CONNECTION.\n");
                }
            }
            catch(IOException e)
            {
                returnedStatus.setText("\nThis is the same server you're running..");
            }
        }
    }
    
    
    
    public class client_handler implements Runnable
        {
            BufferedReader reader;
            PrintWriter writer;
            
            public client_handler(Socket cs,PrintWriter w)
            {
                writer=w;
                try
                {
                    InputStreamReader in=new InputStreamReader(cs.getInputStream());
                    reader= new BufferedReader(in);
                }
                catch(Exception e)
                {
                     returnedStatus.setText("\nAN ERROR OCCURS WHILE READING FROM INPUTSTREAM.\n");
                }
            }
            
            @Override
            public void run()
            {
                int c=0;
                String msg;
                String[] i;
                
                try
                {
                       while((msg=reader.readLine())!=null)
                       {
                       i=msg.split(":");
                       returnedStatus.setText("\nRECEIVED:"+msg+"\n");
                       
                        switch (i[2]) {
                               case "connect":
                                  for(String u:users)
                                  {
                                    if(i[0].equals(u))
                                        c=1;
                                    else
                                        c=0;
                                   }
                                  if(c==0)
                                  {
                                   tell_everyone(msg);
                                   users.add(i[0]);
                                   returnedStatus.setText("SERVER HAS ADDED "+i[0]+" TO THE CHAT USERS LIST.\n");
                                  }
                                  break;
                               case "chat":
                                   tell_everyone(msg);
                                   break;
                               default:
                                   break;
                        }
                   }
                }
                catch(Exception e)
                {
                     returnedStatus.setText("A USER LOST THE CONNECTION.\n");
                     c_os.remove(writer);
                }
            }
        }
    
        public void tell_everyone(String msg)
        {
            Iterator it=c_os.iterator();
            returnedStatus.setText("SENDING: "+msg+"\n");
            
            while(it.hasNext())
            {
                try
                {
                    PrintWriter w=(PrintWriter) it.next();
                    w.println(msg);
                    w.flush(); //The flush method is invoked to write any buffered output to the underlying stream.
                }
                catch(Exception e)
                {
                 returnedStatus.setText("\nAN ERROR OCCURS WHILE TELLING EVERYONE.\n");   
                }
            }
        }
        
    public serverGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        returnedStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Start the server");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(returnedStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(returnedStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        pool.execute(new server_listening());
        returnedStatus.setText("Server is ready.. :D");
        
        new LoginF().setVisible(true);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(serverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(serverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(serverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(serverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new serverGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel returnedStatus;
    // End of variables declaration//GEN-END:variables
}
